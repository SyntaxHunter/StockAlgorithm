import csv, copy
from os import listdir
fileNames = listdir('C:/Users/thomas.sottosanti.20/Algorithmic Trading/daily')
START_DATE = 19980102
STOCK_CHECK_INTERVAL = 30
stocks = {}
validStocks = {}
invalidStocks = {}
stockStartDates = {}
dayList = []
for fileName in fileNames:
    ticker = fileName.split('_')[1].split('.')[0]
    stock = csv.reader(open('C:/Users/thomas.sottosanti.20/Algorithmic Trading/daily/' + fileName, 'r'))
    if ticker=="aapl":
        for row in stock:
            dayList.append(int(row[0]))
        stockStartDates[ticker]=dayList[0]
    priceList = []
    for row in stock:
        stockStartDates[ticker] = row[0]
        break
    for day in stock:
        priceList.append(float(day[2]))
    stocks[ticker] = priceList
    invalidStocks[ticker] = priceList
def updateValidStocks(date):
    deleteTickers = []
    for ticker in invalidStocks.keys():
        if int(stockStartDates[ticker])<=date:
            validStocks[ticker]=stocks[ticker]
            deleteTickers.append(ticker)
    for ticker in deleteTickers:
        del invalidStocks[ticker]

def main():
    
    print("Buy and hold ROI: ", runStrat(buyAndHold))
    #print("Moving average strategy ROI: ", runStrat(movingAverage))
  
##runs the strategy strat over 1000 days, returns final stats: (invested, uninvested, ROI)
def runStrat(strat):
    uninvested = 100_000
    invested = dict.fromkeys(list(validStocks.keys()), 0)
    for day in range(0, 3000):
        if day % STOCK_CHECK_INTERVAL == 0:
            updateValidStocks(dayList[day])
            print(len(validStocks))
        buysAndSells = strat(day, invested, uninvested)
        
        for stock in invested:
            invested[stock] = invested[stock] * validStocks[stock][day] / validStocks[stock][day - 1]  #changes stock value
            invested[stock] = invested[stock] + buysAndSells[stock] #buys and sells
        uninvested = uninvested - sum(buysAndSells.values())
        
        #print("invested: $", invested," Uninvested: $", uninvested)

    return sum(invested.values(), uninvested) / 100_000


##Keeps the portion of total funds invested proportional to the ratio between the 200 day
##and 50 day moving average.
def movingAverage(day, invested, uninvested):
    k = 0.5
    ratioOfAverages = getAverage(day, 50) / getAverage(day, 200)
    #print("Ratio of Averages: ", ratioOfAverages)
    confidence = k * ratioOfAverages
    confidence = min(confidence, 1)
    investmentTarget = confidence * (invested + uninvested)
    return investmentTarget - invested

    
##Distributes capital equally among all stocks                    
def buyAndHold(day, invested, uninvested):
        buysAndSells = copy.deepcopy(invested)
        for stock in buysAndSells:
            buysAndSells[stock] = uninvested / len(buysAndSells)

        return buysAndSells        

    
        
def SMA(stock, day, interval):
    if day - interval < 0:
        print("Error: previous data not sufficient to calculate an average over this interval.")
        return None
    total = 0
    for i in range(day - interval, day):
        total = total + stocks[stock][i]
    return total / interval

def EMA(stock, day, interval):
    if day - interval < 0:
            print("Not enough previous data.")
            return None
    c = 2.0 / (interval + 1)
    ema = SMA(stock, day - interval, interval)
    for day in range(day - interval, day):
        ema = (c * stocks[stock][day]) + ((1 - c) * ema)
    return ema
    
  

main()

