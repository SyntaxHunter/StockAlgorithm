import csv, copy, math
from os import listdir
fileNames = listdir('C:/Users/jake.stenger.19/Desktop/daily')
START_DATE = 19980102
STOCK_CHECK_INTERVAL = 100
stocks = {}
validStocks = []
invalidStocks = []
stockStartDates = {}
dayList = []
global uninvested


aapl = csv.reader(open('C:/Users/jake.stenger.19/Desktop/daily/table_aapl.csv', 'r'))
for row in aapl:
    dayList.append(int(row[0]))

for fileName in fileNames:
    ticker = fileName.split('_')[1].split('.')[0]
    stock = list(csv.reader(open('C:/Users/jake.stenger.19/Desktop/daily/' + fileName, 'r')))
    
    stockDifference = len(stock) + dayList.index(int(stock[0][0]))
    if stockDifference==3926:
        priceList = []
        stockStartDates[ticker] = int(stock[0][0])
        
        for day in stock:
            priceList.append(float(day[2]))
            
        stocks[ticker] = priceList
        if len(stocks[ticker]) < len(dayList):
            for x in range(len(dayList) - len(stocks[ticker])):
                stocks[ticker].insert(0,0)
        invalidStocks.append(ticker)
    

    
def updateValidStocks(date):
    deleteTickers = []
    newStocks = []
    for ticker in invalidStocks:
        if int(stockStartDates[ticker])<date:
            validStocks.append(ticker)
            deleteTickers.append(ticker)
            newStocks.append(ticker)
    for ticker in deleteTickers:
        invalidStocks.remove(ticker)
    return newStocks

def main():
    updateValidStocks(dayList[dayList.index(START_DATE)+1])
    #print("Buy and hold ROI: ", runStrat(buyAndHold))
    print("Moving average strategy ROI: ", runStrat(movingAverage))
  
##runs the strategy strat over 1000 days, returns final stats: (invested, uninvested, ROI)
def runStrat(strat):
    global uninvested
    invested = dict.fromkeys(validStocks, 0)
    uninvested = 100_000
    oldValue = uninvested
    total = 0
    for day in range(1, 3920):
        if day % STOCK_CHECK_INTERVAL == 0:
            newStocks = updateValidStocks(dayList[day])
            for ticker in newStocks:
                invested[ticker] = 0
        #Buy and sell stocks
        strat(day, invested)
        for stock in invested:
            invested[stock] = invested[stock] * (stocks[stock][day] / stocks[stock][day-1])  #changes stock value

        print(day, sum(invested.values()))
    print("Average (mean) growth per year:", math.pow((sum(invested.values())+uninvested)/100000, 1/15))
    return sum(invested.values(), uninvested) / 100_000


##Keeps the portion of total funds invested proportional to the ratio between the 200 day
##and 50 day moving average.
def movingAverage(day, invested):
    global uninvested
    goodStocks = {}
    badStocks = {}
    for stock in validStocks:
        ratio = EMA(stock,day, 50)/EMA(stock,day, 200)
        if ratio > 1.34:
            goodStocks[stock] = ratio
        else:
            badStocks[stock] = ratio
    
    for stock in badStocks.keys():
        uninvested += invested[stock]
        invested[stock] = 0
    ratioTotal = 0
    for stock in goodStocks.keys():
        ratioTotal += goodStocks[stock]
        uninvested += invested[stock]
        invested[stock] = 0
    uninvestedBeforePurchases = uninvested
    boughtStocks = False
    for stock in goodStocks.keys():
        boughtStocks = True
        invested[stock] = uninvestedBeforePurchases * (goodStocks[stock]/ratioTotal)
    if boughtStocks:
        print(max(goodStocks, key = goodStocks.get))
        uninvested = 0

##Distributes capital equally among all stocks                    
def buyAndHold(day, invested):
    global uninvested
    if uninvested>0:
        for stock in validStocks:
            invested[stock] = uninvested/len(validStocks)
    uninvested = 0

def SMA(stock, day, interval):
    if dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock]) < interval:
        interval = dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock])
    total = 0
    for i in range(day - interval, day):
        total = total + stocks[stock][i]
    return total / interval

def EMA(stock, day, interval):
    if dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock]) < interval:
        interval = dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock])
    c = 2.0 / (interval + 1)
    ema = SMA(stock, day, interval)
    for day in range(day - interval, day):
        ema = (c * stocks[stock][day]) + ((1 - c) * ema)
    return ema
    
main()
