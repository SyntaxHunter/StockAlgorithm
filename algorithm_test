import csv
aapl = open('/Users/jstenger/Downloads/quantquote_daily_sp500_83986/daily/table_aapl.csv', 'r')
reader = csv.reader(aapl)
aapl_list = []
for row in reader:
    aapl_list.append(float(row[2]))

##Simulates investment in Apple stock over the 1000 trading days


def main():
    print("Buy and hold ROI: ", runStrat(buyAndHold))
    print("Moving average strategy ROI: ", runStrat(movingAverage))
  
##runs the strategy strat over 1000 days, returns final stats: (invested, uninvested, ROI)
def runStrat(strat):
    uninvested = 100_000
    invested = 0
    for day in range(1000, 2000):
        invested = invested * aapl_list[day + 1] / aapl_list[day]
        buyOrSell = strat(day, invested, uninvested)
        invested = invested + buyOrSell
        uninvested = uninvested - buyOrSell
        #print("invested: $", invested," Uninvested: $", uninvested)

    return (invested + uninvested) / 100_000


##Keeps the portion of total funds invested proportional to the ratio between the 200 day
##and 50 day moving average.
def movingAverage(day, invested, uninvested):
    k = 0.5
    ratioOfAverages = getAverage(day, 50) / getAverage(day, 200)
    #print("Ratio of Averages: ", ratioOfAverages)
    confidence = k * ratioOfAverages
    confidence = min(confidence, 1)
    investmentTarget = confidence * (invested + uninvested)
    return investmentTarget - invested

    
##The simplest strategy, invests all capital                    
def buyAndHold(day, invested, uninvested):
    return uninvested

def getAverage(day, interval):
    if day - interval / 2 < 0:
        print("Error: surrounding data not sufficient to calculate an average over this interval.")
        return None
    total = 0
    for i in range(day - interval // 2, day + interval // 2):
        total = total + aapl_list[i]
    return total / interval

main()
