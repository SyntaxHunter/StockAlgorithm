import csv, copy
from os import listdir
fileNames = listdir('C:/Users/thomas.sottosanti.20/Algorithmic Trading/daily')
START_DATE = 19980102
STOCK_CHECK_INTERVAL = 7
stocks = {}
validStocks = []
invalidStocks = []
stockStartDates = {}
dayList = []

aapl = csv.reader(open('C:/Users/thomas.sottosanti.20/Algorithmic Trading/daily/table_aapl.csv', 'r'))
for row in aapl:
    dayList.append(int(row[0]))

for fileName in fileNames:
    ticker = fileName.split('_')[1].split('.')[0]
    stock = csv.reader(open('C:/Users/thomas.sottosanti.20/Algorithmic Trading/daily/' + fileName, 'r'))
    priceList = []
    for row in stock:
        stockStartDates[ticker] = row[0]
        break
    for day in stock:
        priceList.append(float(day[2]))
    stocks[ticker] = priceList
    if len(stocks[ticker])<len(dayList):
        for x in range(len(dayList)-len(stocks[ticker])):
            stocks[ticker].insert(0,0)
    invalidStocks.append(ticker)
    
def updateValidStocks(date):
    deleteTickers = []
    newStocks = []
    for ticker in invalidStocks:
        if int(stockStartDates[ticker])<date:
            validStocks.append(ticker)
            deleteTickers.append(ticker)
            newStocks.append(ticker)
    for ticker in deleteTickers:
        invalidStocks.remove(ticker)
    return newStocks
    
def main():
    updateValidStocks(START_DATE)
    print("Buy and hold ROI: ", runStrat(buyAndHold))
    print("EMA ROI: ", runStrat(EMA))
    #print("Moving average strategy ROI: ", runStrat(movingAverage))
  
##runs the strategy strat over 1000 days, returns final stats: (invested, uninvested, ROI)
def runStrat(strat):
    print(validStocks)
    uninvested = 100_000
    invested = dict.fromkeys(validStocks, 0)
    for day in range(1, 3000):
        if day % STOCK_CHECK_INTERVAL == 0:
            newStocks = updateValidStocks(dayList[day])
            for ticker in newStocks:
                invested[ticker] = 0
        for stock in invested:
            invested[stock] = invested[stock] * stocks[stock][day] / stocks[stock][day-1]  #changes stock value
            
        #Buy and sell stocks
        strat(day, invested, uninvested)
        #print("invested: $", invested," Uninvested: $", uninvested)

    return sum(invested.values(), uninvested) / 100_000


##Keeps the portion of total funds invested proportional to the ratio between the 200 day
##and 50 day moving average.
def movingAverage(day, invested, uninvested):
    goodStocks = {}
    badStocks = {}
    for stock in validStocks:
        ratio = EMA(stock,day, 50)/EMA(day, 200)
        if ratio > 1:
            goodStocks[stock] = ratio
        else:
            badStocks[stock] = ratio
    
    return investmentTarget - invested

    
##Distributes capital equally among all stocks                    
def buyAndHold(day, invested, uninvested):
        buysAndSells = copy.deepcopy(invested)
        for stock in buysAndSells:
            buysAndSells[stock] = uninvested / len(buysAndSells)

        return buysAndSells        

   def EMAvsPrice(day, invested, uninvested):
    goodStocks = {}
    for stocks in validStocks:
        dayShift = dayList.index(int(stockStartDates[stock]))
        priceToEMA = stocks[stock][day - dayShift]] > EMA(stock, day - dayShift, 50)
        if priceToEMA > 1:
            goodStocks[stock] = priceToEMA
    weightSum = sum(goodStocks.values())
    totalFunds = uninvested = sum(invested.values())
    for stock in invested:
        invested[stock] = 0
    for stock in goodStocks:
        invested[stock] = totalFunds * goodStocks[stock] / weightSum
    

        
def SMA(stock, day, interval):
    if day - interval < 0:
        print("Error: previous data not sufficient to calculate an average over this interval.")
        return None
    total = 0
    for i in range(day - interval, day):
        total = total + stocks[stock][i]
    return total / interval

def EMA(stock, day, interval):
    #if currentDate -stockstartdate < interval, set interval = to difference
    if dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock]) < interval:
            interval = dayList.index(START_DATE)+day-dayList.index(stockStartDates[stock])
            return None
    c = 2.0 / (interval + 1)
    ema = SMA(stock, day - interval, interval)
    for day in range(day - interval, day):
        ema = (c * stocks[stock][day]) + ((1 - c) * ema)
    return ema
    
  

main()
